{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","useState","image","setImage","imageFilename","setImageFilename","isLoading","setIsLoading","drawRectContext","setDrawRectContext","savedShapes","setSavedShapes","shapeVisibility","setShapeVisibility","onUpload","event","a","fetch","method","body","target","files","response","json","filename","console","log","preventDefault","useEffect","img","Image","src","length","JSON","stringify","current","width","decoding","decode","then","getCanvasCoords","clientX","clientY","rect","getBoundingClientRect","x","left","y","top","refreshImage","useCallback","context","clientWidth","height","drawImage","clientHeight","refreshShapes","map","i","startX","startY","strokeStyle","strokeRect","redrawCanvas","sharedContext","getContext","clearRect","currentShapeRef","className","id","onChange","type","onMouseDown","coords","onMouseUp","state","onMouseMove","ref","isShapeVisible","index","checked","updatedState","toggleShapeVisibility","onClick","shape","filter","exists","visibility","deleteShape","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.759592da.chunk.js","sourcesContent":["import './App.css';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nconst API_URL = process.env.NODE_ENV === 'development' ? 'http://127.0.0.1:5000' : '';\n\nfunction App() {\n  const canvasRef = useRef();\n  const [image, setImage] = useState(null);\n  const [imageFilename, setImageFilename] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [drawRectContext, setDrawRectContext] = useState(null);\n  const [savedShapes, setSavedShapes] = useState([]);\n  const [shapeVisibility, setShapeVisibility] = useState([]);\n\n  const onUpload = async event => {\n    setIsLoading(true);\n    const response = await fetch(API_URL + '/upload', {\n      method: 'POST',\n      body: event.target.files[0]\n    });\n    const { filename } = await response.json();\n    console.log('has filename', filename)\n    setIsLoading(false);\n    setImageFilename(filename);\n    event.preventDefault();\n  };\n\n  useEffect(() => {\n    if (!imageFilename) {\n      return;\n    }\n    setIsLoading(true);\n    const img = new Image();\n    img.src = savedShapes.length > 0 ? `${API_URL}/composition/${imageFilename}?boxes=${JSON.stringify(savedShapes)}&width=${canvasRef.current.width}` : `${API_URL}/static/uploads/${imageFilename}`;\n    img.decoding = 'async';\n    img.decode().then(() => {\n      setImage(img);\n      setIsLoading(false);\n    });\n  }, [imageFilename, savedShapes]);\n\n  const getCanvasCoords = function (clientX, clientY) {\n    var rect = canvasRef.current.getBoundingClientRect();\n\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  };\n\n  const refreshImage = useCallback(async (context) => {\n    canvasRef.current.width = canvasRef.current.clientWidth;\n    canvasRef.current.height = (canvasRef.current.clientWidth / image.width) * image.height\n    context.drawImage(image, 0, 0, canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n  }, [image]);\n\n  const refreshShapes = useCallback((context) => {\n    savedShapes.map(([startX, startY, width, height], i) => {\n      if (!shapeVisibility[i]) {\n        return false;\n      }\n      context.strokeStyle = 'blue'\n      context.strokeRect(startX, startY, width, height);\n      return true;\n    })\n  }, [savedShapes, shapeVisibility]);\n\n\n  const redrawCanvas = useCallback(async (sharedContext) => {\n    if (!sharedContext && !canvasRef.current) {\n      return;\n    }\n    const context = sharedContext ?? canvasRef.current.getContext('2d');\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    refreshImage(context, image);\n    refreshShapes(context);\n  }, [image, refreshImage, refreshShapes]);\n\n  useEffect(() => {\n    redrawCanvas();\n  }, [redrawCanvas, savedShapes, shapeVisibility]);\n\n  const currentShapeRef = useRef([0, 0, 0, 0]);\n\n  const onMouseDown = event => {\n    const context = canvasRef.current.getContext('2d');\n    setDrawRectContext(context);\n    const coords = getCanvasCoords(event.clientX, event.clientY);\n    currentShapeRef.current = [coords.x, coords.y, 0, 0];\n  };\n\n  const onMouseUp = event => {\n    setDrawRectContext(null);\n    setSavedShapes(state => [...state, currentShapeRef.current]);\n    setShapeVisibility(state => [...state, true]);\n  }\n\n  const onMouseMove = event => {\n    if (!drawRectContext) {\n      return;\n    }\n\n    redrawCanvas(drawRectContext);\n\n    const [startX, startY] = currentShapeRef.current;\n    const coords = getCanvasCoords(event.clientX, event.clientY);\n    const width = coords.x - startX;\n    const height = coords.y - startY;\n\n    drawRectContext.strokeStyle = 'blue'\n    drawRectContext.strokeRect(startX, startY, width, height);\n    currentShapeRef.current = [startX, startY, width, height]\n  };\n\n  const toggleShapeVisibility = index => {\n    const updatedState = shapeVisibility.map((state, i) => i === index ? !state : state)\n    setShapeVisibility(updatedState);\n    redrawCanvas();\n  }\n\n  const deleteShape = index => {\n    setSavedShapes(savedShapes.map((shape, i) => index === i ? false : shape).filter(exists => exists));\n    setShapeVisibility(shapeVisibility.map((visibility, i) => index === i ? null : visibility).filter(state => state !== null));\n  }\n\n  return (\n    <div className=\"page\">\n      <input id=\"upload\" onChange={onUpload} type=\"file\" />\n      {isLoading && <div className=\"loader\" />}\n      {image && <canvas className=\"canvas\" onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove} ref={canvasRef} />}\n      <div className=\"sidebar\">\n        {shapeVisibility.map((isShapeVisible, index) => (\n          <div className=\"row\">\n            <p>Box {index}</p>\n          Enabled?\n            <input type=\"checkbox\" checked={isShapeVisible} onChange={() => toggleShapeVisibility(index)} />\n            <button onClick={() => deleteShape(index)}>Delete</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}